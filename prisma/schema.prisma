generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(uuid()) @map("_id")
  email                 String                 @unique
  password              String?
  user_type             user_type
  department            String
  cellphoneNumber       String
  firstName             String
  lastName              String
  localNumber           String?
  resetPasswordExpires  DateTime?
  resetPasswordToken    String?
  serviceRequests       ServiceRequest[]
  supervisorAssignments SupervisorAssignment[]
  accounts              Account[]
  sessions              Session[]
}

model Session {
  id           String   @id @default(uuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                String   @id @default(uuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model ServiceRequest {
  id                   String                 @id @default(uuid()) @map("_id")
  userId               String
  details              String
  concern              String
  equipment            Equipment[]
  implementationPlan   ImplementationPlan?
  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  ServiceRequestRating ServiceRequestRating?
  status               ServiceRequestStatus[]
  supervisorAssignment SupervisorAssignment?
  deleteAt             DateTime?
}

model SupervisorAssignment {
  id               String         @id @default(uuid()) @map("_id")
  serviceRequestId String         @unique
  supervisorId     String
  assignedAt       DateTime       @default(now())
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  supervisor       User           @relation(fields: [supervisorId], references: [id], onDelete: Cascade)
}

model ServiceRequestStatus {
  id               String         @id @default(uuid()) @map("_id")
  serviceRequestId String
  timestamp        DateTime
  note             String?
  status           status
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
}

model ServiceRequestRating {
  id               String         @id @default(uuid()) @map("_id")
  description      String
  ratings          Int
  serviceRequestId String
  serviceRequest   ServiceRequest @relation(fields: [id], references: [id], onDelete: Cascade)
}

model ImplementationPlan {
  id                   String                @id @default(uuid()) @map("_id")
  description          String
  status               String
  serviceRequestId     String                @unique
  files                Files[]
  serviceRequest       ServiceRequest        @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  tasks                Task[]
}

model Task {
  id                   String                @id @default(uuid()) @map("_id")
  implementationPlanId String
  name                 String
  startTime            DateTime 
  endTime              DateTime    
  checked              Boolean
  implementationPlan   ImplementationPlan    @relation(fields: [implementationPlanId], references: [id], onDelete: Cascade)
  assignments          PersonnelAssignment[]
}

model Files {
  id                   String             @id @default(uuid()) @map("_id")
  implementationPlanId String
  url                  String
  implementationPlan   ImplementationPlan @relation(fields: [implementationPlanId], references: [id], onDelete: Cascade)
}

model Personnel {
  id         String                 @id @default(uuid()) @map("_id")
  name       String
  department String
  position   String
  assignments PersonnelAssignment[]
}

model PersonnelAssignment {
  id           String     @id @default(uuid()) @map("_id")
  taskId       String
  personnelId  String
  assignedAt   DateTime?  @default(now())
  task         Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  personnel    Personnel  @relation(fields: [personnelId], references: [id], onDelete: Cascade)
  
  @@unique([taskId, personnelId])
}

model Equipment {
  id               String           @id @default(uuid()) @map("_id")
  quantity         Int
  description      String
  brand            String
  serialNumber     String
  supplier         String
  unitCost         Float
  totalCost        Float
  datePurchased    DateTime
  dateReceived     DateTime
  status           equipment_status
  location         String
  department       String
  serviceRequestId String?
  serviceRequest   ServiceRequest?  @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
}

enum user_type {
  ADMIN
  USER
  SUPERVISOR
}

enum status {
  pending
  approved
  rejected
  in_progress
  archive
}

enum equipment_status {
  Operational
  Repairable
  Scrap
}
