generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  email                 String                 @unique
  password              String?
  user_type             user_type
  department            String
  cellphoneNumber       String
  firstName             String
  lastName              String
  localNumber           String?
  resetPasswordExpires  DateTime?
  resetPasswordToken    String?
  serviceRequests       ServiceRequest[]
  supervisorAssignments SupervisorAssignment[]
  accounts              Account[]
  sessions              Session[]
  pendingLimit          Int                    @default(5)
  isVerified            Boolean                @default(false)
  createdAt             DateTime               @default(now())
  notifications         Notification[]

  VerificationToken VerificationToken[]
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model ServiceRequest {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  userId               String                 @db.ObjectId
  details              String
  concern              String
  deleteAt             DateTime?
  equipment            Equipment[]
  implementationPlan   ImplementationPlan?
  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  ServiceRequestRating ServiceRequestRating?
  // Seriously, you'll be rejected in this PR bro....
  status               ServiceRequestStatus[]
  supervisorAssignment SupervisorAssignment?
}

model SupervisorAssignment {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  serviceRequestId String         @unique @db.ObjectId
  supervisorId     String         @db.ObjectId
  assignedAt       DateTime       @default(now())
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  supervisor       User           @relation(fields: [supervisorId], references: [id], onDelete: Cascade)
}

model ServiceRequestStatus {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  serviceRequestId String         @db.ObjectId
  timestamp        DateTime
  note             String?
  status           status
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
}

model ServiceRequestRating {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  description      String
  ratings          Int
  serviceRequestId String           @unique @db.ObjectId
  questions        RatingQuestion[]
  serviceRequest   ServiceRequest   @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
}

model RatingQuestion {
  id                     String               @id @default(auto()) @map("_id") @db.ObjectId
  question               String
  answer                 String?
  serviceRequestRatingId String               @db.ObjectId
  serviceRequestRating   ServiceRequestRating @relation(fields: [serviceRequestRatingId], references: [id], onDelete: Cascade)
}

model ImplementationPlan {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  description      String
  status           String
  serviceRequestId String         @unique @db.ObjectId
  files            Files[]
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  tasks            Task[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now())
}

model Task {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  implementationPlanId String                @db.ObjectId
  name                 String
  checked              Boolean
  endTime              DateTime
  startTime            DateTime
  assignments          PersonnelAssignment[]
  implementationPlan   ImplementationPlan    @relation(fields: [implementationPlanId], references: [id], onDelete: Cascade)
}

model Files {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  implementationPlanId String             @db.ObjectId
  url                  String
  implementationPlan   ImplementationPlan @relation(fields: [implementationPlanId], references: [id], onDelete: Cascade)
}

model Personnel {
  id          String                @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  department  String
  position    String
  assignments PersonnelAssignment[]
}

model PersonnelAssignment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  personnelId String    @db.ObjectId
  assignedAt  DateTime? @default(now())
  taskId      String    @db.ObjectId
  personnel   Personnel @relation(fields: [personnelId], references: [id], onDelete: Cascade)
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, personnelId])
}

model VerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_tokens")
}

model Equipment {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  quantity         Int
  description      String
  brand            String
  serialNumber     String
  supplier         String
  unitCost         Float
  totalCost        Float
  datePurchased    DateTime
  dateReceived     DateTime
  status           equipment_status
  location         String
  department       String
  serviceRequestId String?          @db.ObjectId
  serviceRequest   ServiceRequest?  @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
}

model Notification {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  type         NotificationType
  message      String
  link         String
  department   String?
  supervisorId String?          @db.ObjectId
  user         User?            @relation(fields: [supervisorId], references: [id], onDelete: Cascade)
  isRead       Boolean          @default(false)
  createdAt    DateTime         @default(now())
}

enum user_type {
  ADMIN
  USER
  SUPERVISOR
  SECRETARY
}

enum status {
  pending
  approved
  rejected
  in_progress
  archived
  completed
}

enum equipment_status {
  Operational
  Repairable
  Scrap
}

enum NotificationType {
  inventory
  service_request
  implementation_plan
  personnel
}
